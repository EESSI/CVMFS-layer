name: Build client packages

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:

  build-packages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get the version number for the packages
        id: get_version
        # If this is a tag, use the tag name (e.g. v1.2.3) without v as version number.
        # Otherwise, just use 0.0.
        run: |
          VERSION=0.0
          REF_NAME=${{ github.ref }}
          [[ $REF_NAME == refs/tags/v* ]] && VERSION=${REF_NAME/refs\/tags\/v/}
          echo ::set-output name=version::${VERSION}

      # The next step uses a custom Ansible inventory, and due to that it cannot find
      # the group_vars folder inside the inventory folder. This symlink fixes that.
      - name: Make symlink to group_vars
        run: ln -s inventory/group_vars

      - name: Prepare package source
        uses: roles-ansible/check-ansible-debian-stretch-action@master
        with:
          targets: "./prepare-client-packages.yml"
          hosts: "localhost"

# We probably should loop over the set {rpm,deb,osxpkg} to create packages, but
# it will make debugging more annoying.

      - name: Build RPM package
        id: build-rpm
        uses: bpicode/github-action-fpm@master
        with:
          fpm_args: "etc"
          fpm_opts: "--debug -n cvmfs-config-eessi -v ${{ steps.get_version.outputs.version }} -t rpm -a all -s dir -C ./package --description 'CVMFS config repository package for EESSI.'"

      - name: Build Deb package
        id: build-deb
        uses: bpicode/github-action-fpm@master
        with:
          fpm_args: "etc"
          fpm_opts: "--debug -n cvmfs-config-eessi -v ${{ steps.get_version.outputs.version }} -t deb -a all -s dir -C ./package --description 'CVMFS config repository package for EESSI.'"

      - name: Find filenames of generated packages
        id: find_filenames
        shell: bash
        run: |
          rpmfile="$(ls -1 *.rpm)"
          debfile="$(ls -1 *.deb)"
          echo ::set-output name=rpmfile::${rpmfile}
          echo ::set-output name=debfile::${debfile}

      - name: Upload Deb package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: Deb package
          path: ${{ steps.find_filenames.outputs.debfile }}

      - name: Upload RPM package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: RPM package
          path: ${{ steps.find_filenames.outputs.rpmfile }}

  build-osx-package:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get the version number for the packages
        id: get_version
        # If this is a tag, use the tag name (e.g. v1.2.3) without v as version number.
        # Otherwise, just use 0.0.
        run: |
          VERSION=0.0
          REF_NAME=${{ github.ref }}
          [[ $REF_NAME == refs/tags/v* ]] && VERSION=${REF_NAME/refs\/tags\/v/}
          echo ::set-output name=version::${VERSION}

      # The next step uses a custom Ansible inventory, and due to that it cannot find
      # the group_vars folder inside the inventory folder. This symlink fixes that.
      - name: Make symlink to group_vars
        run: ln -s inventory/group_vars

      - name: Install Ansible
        run: pip3 install ansible

      - name: Prepare package source
        run: ansible-playbook --connection=local ./prepare-client-packages.yml

      - name: Install dependencies
        run: brew install gnu-tar

      - name: Install fpm
        run: gem install --no-document fpm

      - name: Build package
        run: "fpm --debug -n cvmfs-config-eessi -v ${{ steps.get_version.outputs.version }} -t osxpkg -a all -s dir -C ./package --description 'CVMFS config repository package for EESSI.' etc"

      - name: Find filename of generated package
        id: find_filenames
        shell: bash
        run: |
          pkgfile="$(ls -1 *.pkg)"
          echo ::set-output name=pkgfile::${pkgfile}

      - name: Upload macOS package as artifact
        uses: actions/upload-artifact@v2
        with:
          name: macOS package
          path: ${{ steps.find_filenames.outputs.pkgfile }}

  release:
    needs: [build-packages, build-osx-package]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download Deb package
        uses: actions/download-artifact@v2
        with:
          name: Deb package

      - name: Download RPM package
        uses: actions/download-artifact@v2
        with:
          name: RPM package

      - name: Download macOS package
        uses: actions/download-artifact@v2
        with:
          name: macOS package

      - name: Find filenames of downloaded packages
        id: find_filenames
        shell: bash
        run: |
          rpmfile="$(ls -1 *.rpm)"
          debfile="$(ls -1 *.deb)"
          pkgfile="$(ls -1 *.pkg)"
          echo ::set-output name=rpmfile::${rpmfile}
          echo ::set-output name=debfile::${debfile}
          echo ::set-output name=pkgfile::${pkgfile}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Filesystem Layer ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload RPM as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_filenames.outputs.rpmfile }}
          asset_name: ${{ steps.find_filenames.outputs.rpmfile }}
          asset_content_type: application/x-rpm

      - name: Upload Deb as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_filenames.outputs.debfile }}
          asset_name: ${{ steps.find_filenames.outputs.debfile }}
          asset_content_type: application/x-deb

      - name: Upload Pkg as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_filenames.outputs.pkgfile }}
          asset_name: ${{ steps.find_filenames.outputs.pkgfile }}
          asset_content_type: application/x-newton-compatible-pkg
